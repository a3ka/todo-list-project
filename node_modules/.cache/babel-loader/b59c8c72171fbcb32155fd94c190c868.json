{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/App.tsx\";\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from \"./components/AddItemForm\";\nimport ButtonAppBar from \"./components/ButtonAppBar\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\nimport { removeTaskAC, tasksReducer } from \"./components/tasksReducer\";\n\nfunction App() {\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, tasksDispatch] = useReducer(tasksReducer, {\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n\n  function removeTask(id, todolistId) {\n    // //достанем нужный массив по todolistId:\n    // let todolistTasks = tasks[todolistId];\n    // // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n    // tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\n    // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n    // setTasks({...tasks});\n    tasksDispatch(removeTaskAC(id));\n  }\n\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    }; //достанем нужный массив по todolistId:\n\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n\n    tasks[todolistId] = [task, ...todolistTasks]; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n    // setTasks({...tasks});\n  }\n\n  const updateTask = (tId, id, newTitle) => {// setTasks({...tasks, [tId]: tasks[tId].map(el => el.id === id ? {...el, title: newTitle} : el)})\n  };\n\n  function changeStatus(id, isDone, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.isDone = isDone; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n      // setTasks({...tasks});\n    }\n  }\n\n  function changeFilter(value, todolistId) {\n    let todolist = todolists.find(tl => tl.id === todolistId);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodolists([...todolists]);\n    }\n  }\n\n  function removeTodolist(id) {\n    // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\n    setTodolists(todolists.filter(tl => tl.id !== id)); // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n\n    delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  const addTodolist = newTitle => {\n    let newId = v1();\n    let newTodolist = {\n      id: newId,\n      title: newTitle,\n      filter: \"all\"\n    };\n    setTodolists([newTodolist, ...todolists]); // setTasks({...tasks, [newId]: []})\n  };\n\n  const updateTodolistTitle = (newTitle, tId) => {\n    // id: todolistId2, title: \"What to buy\", filter: \"all\"\n    console.log(newTitle);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"App\">\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ButtonAppBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      fixed: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      style: {\n        padding: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AddItemForm, {\n      callBack: addTodolist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, todolists.map(tl => {\n      let allTodolistTasks = tasks[tl.id];\n      let tasksForTodolist = allTodolistTasks;\n\n      if (tl.filter === \"active\") {\n        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n      }\n\n      if (tl.filter === \"completed\") {\n        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n      }\n\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: tl.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(Paper, {\n        style: {\n          padding: \"20px\"\n        },\n        elevation: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Todolist, {\n        id: tl.id,\n        title: tl.title,\n        tasks: tasksForTodolist,\n        removeTask: removeTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        updateTask: updateTask,\n        updateTodolistTitle: updateTodolistTitle,\n        changeTaskStatus: changeStatus // filter={tl.filter}\n        ,\n        removeTodolist: removeTodolist,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 37\n        }\n      })));\n    }))))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useReducer","useState","Todolist","v1","AddItemForm","ButtonAppBar","Container","Grid","Paper","removeTaskAC","tasksReducer","App","todolistId1","todolistId2","todolists","setTodolists","id","title","filter","tasks","tasksDispatch","isDone","removeTask","todolistId","addTask","task","todolistTasks","updateTask","tId","newTitle","changeStatus","find","t","changeFilter","value","todolist","tl","removeTodolist","setTasks","addTodolist","newId","newTodolist","updateTodolistTitle","console","log","padding","map","allTodolistTasks","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {removeTaskAC, tasksReducer} from \"./components/tasksReducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n\r\n    let [todolists, setTodolists] = useState([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, tasksDispatch] = useReducer(tasksReducer, {\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        // tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n        tasksDispatch(removeTaskAC(id))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n    }\r\n\r\n    const updateTask = (tId: string, id: string, newTitle: string) => {\r\n        // setTasks({...tasks, [tId]: tasks[tId].map(el => el.id === id ? {...el, title: newTitle} : el)})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            // setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        let newId = v1()\r\n        let newTodolist: TodolistType = {id: newId, title: newTitle, filter: \"all\"}\r\n        setTodolists([newTodolist, ...todolists])\r\n        // setTasks({...tasks, [newId]: []})\r\n    }\r\n\r\n    const updateTodolistTitle = (newTitle: string, tId: string) => {\r\n        // id: todolistId2, title: \"What to buy\", filter: \"all\"\r\n        console.log(newTitle)\r\n    }\r\n\r\n    return (\r\n        // <div className=\"App\">\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"20px\"}} elevation={3}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        updateTask={updateTask}\r\n                                        updateTodolistTitle={updateTodolistTitle}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        // filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>;\r\n                        })\r\n                        }\r\n                        </Grid>\r\n                        </Container>\r\n                        </div>\r\n                        )\r\n                        ;\r\n                    }\r\n\r\n                    export default App;\r\n"]},"metadata":{},"sourceType":"module"}