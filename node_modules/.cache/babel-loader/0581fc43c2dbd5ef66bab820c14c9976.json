{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\n//* CRUD\n//* C -create\n//* R - read\n//* U - update\n//* D - delete\nfunction App() {\n  // BLL\n  //many todolists:\n  const todolistId_1 = v1();\n  const todolistId_2 = v1();\n  const [todolists, setTodolists] = useState([{\n    id: todolistId_1,\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: todolistId_2,\n    title: 'What to buy',\n    filter: 'all'\n  }]);\n  const [tasks, setTasks] = useState({\n    [todolistId_1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todolistId_2]: [{\n      id: v1(),\n      title: \"Sugar\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"Salat\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"Oil\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"BTC\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"ETH\",\n      isDone: false\n    }]\n  }); // FUNCTIONS\n\n  function removeTask(tasksId, todolistId) {\n    const tasksFromTodolist = tasks[todolistId];\n    const filteredTasks = tasksFromTodolist.filter(t => t.id !== tasksId); // const copyTasks = {...tasks}\n    // copyTasks[todolistId] = filteredTasks\n    //\n    // setTasks(copyTasks);\n\n    setTasks({ ...tasks,\n      [todolistId]: filteredTasks\n    });\n  }\n\n  function addTask(title, todolistId) {\n    const newTask = {\n      id: v1(),\n      title,\n      isDone: false\n    };\n    setTasks({ ...tasks,\n      [todolistId]: [newTask, ...tasks[todolistId]]\n    }); // const task = {id: v1(), title: title, isDone: false};\n    // let newTasks = [task, ...tasks];\n    // setTasks(newTasks);\n  }\n\n  const changeStatusCheckbox = (currentID, eventStatus, todolistId) => {\n    setTasks({ ...tasks,\n      [todolistId]: tasks[todolistId].map(t => t.id === currentID ? { ...t,\n        eventStatus\n      } : t)\n    }); // V2\n    // const updatedTasksFromTodolist = tasks[todolistId]\n    //     .map (t => t.id === currentID ? {...t, eventStatus} : t)\n    // const copyTasks = {...tasks}\n    // copyTasks[todolistId] = updatedTasksFromTodolist\n    // setTasks(copyTasks)\n  };\n\n  function changeFilter(filter, todolistId) {\n    setTodolists(todolists.map(tl => tl.id === todolistId ? { ...tl,\n      filter\n    } : tl));\n  } // UI\n\n\n  const todolistComponents = todolists.map(tl => {\n    let tasksForTodolist = tasks[tl.id];\n\n    if (filter === \"active\") {\n      tasksForTodolist = tasks.filter(t => t.isDone === false);\n    }\n\n    if (filter === \"completed\") {\n      tasksForTodolist = tasks.filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      title: tl.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeStatusCheckbox: changeStatusCheckbox,\n      filter: filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    });\n  });\n  const [filter, setFilter] = useState(\"all\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useState","Todolist","v1","App","todolistId_1","todolistId_2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","tasksId","todolistId","tasksFromTodolist","filteredTasks","t","addTask","newTask","changeStatusCheckbox","currentID","eventStatus","map","changeFilter","tl","todolistComponents","tasksForTodolist","setFilter"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [todolistId:string]: Array<TaskType>\r\n}\r\n\r\n//* CRUD\r\n//* C -create\r\n//* R - read\r\n//* U - update\r\n//* D - delete\r\n\r\nfunction App() {\r\n\r\n    // BLL\r\n    //many todolists:\r\n    const todolistId_1 = v1();\r\n    const todolistId_2 = v1();\r\n\r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId_1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistId_2]: [\r\n            {id: v1(), title: \"Sugar\", isDone: true},\r\n            {id: v1(), title: \"Salat\", isDone: true},\r\n            {id: v1(), title: \"Oil\", isDone: false},\r\n            {id: v1(), title: \"BTC\", isDone: false},\r\n            {id: v1(), title: \"ETH\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    function removeTask(tasksId: string, todolistId: string) {\r\n        const tasksFromTodolist = tasks[todolistId];\r\n        const filteredTasks = tasksFromTodolist.filter(t => t.id !== tasksId);\r\n        // const copyTasks = {...tasks}\r\n        // copyTasks[todolistId] = filteredTasks\r\n        //\r\n        // setTasks(copyTasks);\r\n\r\n        setTasks({...tasks, [todolistId]: filteredTasks})\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        const newTask = {id: v1(), title, isDone: false};\r\n        setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n        // const task = {id: v1(), title: title, isDone: false};\r\n        // let newTasks = [task, ...tasks];\r\n        // setTasks(newTasks);\r\n    }\r\n\r\n    const changeStatusCheckbox = (currentID: string, eventStatus: boolean, todolistId: string) => {\r\n        setTasks({...tasks,\r\n        [todolistId]: tasks[todolistId].map(t => t.id === currentID ? {...t, eventStatus} : t)})\r\n\r\n        // V2\r\n        // const updatedTasksFromTodolist = tasks[todolistId]\r\n        //     .map (t => t.id === currentID ? {...t, eventStatus} : t)\r\n        // const copyTasks = {...tasks}\r\n        // copyTasks[todolistId] = updatedTasksFromTodolist\r\n        // setTasks(copyTasks)\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todolistId: string) {\r\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter} : tl))\r\n    }\r\n\r\n\r\n    // UI\r\n\r\n    const todolistComponents =  todolists.map(tl => {\r\n        let tasksForTodolist = tasks[tl.id];\r\n\r\n        if (filter === \"active\") {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n        }\r\n        if (filter === \"completed\") {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n        }\r\n\r\n        return (\r\n            <Todolist title={tl.title}\r\n                  tasks={tasksForTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTask={addTask}\r\n                  changeStatusCheckbox={changeStatusCheckbox}\r\n                  filter={filter}\r\n        />)\r\n    })\r\n\r\n    const [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}