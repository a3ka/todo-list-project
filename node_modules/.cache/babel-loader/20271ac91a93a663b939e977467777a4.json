{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/components/AddItemForm.tsx\";\nimport React, { useState } from 'react';\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nexport const AddItemForm = props => {\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState(null);\n\n  const addTask = () => {\n    let newTitle = title.trim();\n\n    if (newTitle !== \"\") {\n      props.callBack(newTitle);\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  const onChangeHandler = e => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = e => {\n    setError(null);\n\n    if (e.charCode === 13) {\n      addTask();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-basic\",\n    label: error,\n    variant: \"outlined\",\n    size: 'small',\n    value: title,\n    onChange: onChangeHandler,\n    onKeyPress: onKeyPressHandler,\n    error: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      maxWidth: '15px',\n      maxHeight: '15px',\n      minWidth: '15px',\n      minHeight: '15px'\n    },\n    onClick: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n};","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/components/AddItemForm.tsx"],"names":["React","useState","IconButton","TextField","AddIcon","AddItemForm","props","title","setTitle","error","setError","addTask","newTitle","trim","callBack","onChangeHandler","e","currentTarget","value","onKeyPressHandler","charCode","maxWidth","maxHeight","minWidth","minHeight"],"mappings":";AAAA,OAAOA,KAAP,IAA2CC,QAA3C,QAA0D,OAA1D;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,mBAApC;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAOA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAsB;AAE7C,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAgB,IAAhB,CAAhC;;AAEA,QAAMU,OAAO,GAAG,MAAM;AAClB,QAAIC,QAAQ,GAAGL,KAAK,CAACM,IAAN,EAAf;;AACA,QAAID,QAAQ,KAAK,EAAjB,EAAqB;AACjBN,MAAAA,KAAK,CAACQ,QAAN,CAAeF,QAAf;AACAJ,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,QAAQ,CAAC,mBAAD,CAAR;AACH;AACJ,GARD;;AAUA,QAAMK,eAAe,GAAIC,CAAD,IAAsC;AAC1DR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAR;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,CAAD,IAAwC;AAC9DN,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAIM,CAAC,CAACI,QAAF,KAAe,EAAnB,EAAuB;AACnBT,MAAAA,OAAO;AACV;AACJ,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAC,gBAAd;AAA+B,IAAA,KAAK,EAAEF,KAAtC;AAA6C,IAAA,OAAO,EAAC,UAArD;AAAgE,IAAA,IAAI,EAAE,OAAtE;AACW,IAAA,KAAK,EAAEF,KADlB;AAEW,IAAA,QAAQ,EAAEQ,eAFrB;AAGW,IAAA,UAAU,EAAEI,iBAHvB;AAIW,IAAA,KAAK,EAAE,CAAC,CAACV,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAeI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE,MAA/B;AAAuCC,MAAAA,QAAQ,EAAE,MAAjD;AAAyDC,MAAAA,SAAS,EAAE;AAApE,KAAnB;AAAiG,IAAA,OAAO,EAAEb,OAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAfJ,CADJ;AAyBH,CAnDM","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\ntype PropsType = {\n    callBack: (title: string) => void\n}\n\nexport const AddItemForm = (props: PropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addTask = () => {\n        let newTitle = title.trim();\n        if (newTitle !== \"\") {\n            props.callBack(newTitle);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n\n    return (\n        <div>\n            {/*<input value={title}*/}\n            {/*       onChange={onChangeHandler}*/}\n            {/*       onKeyPress={onKeyPressHandler}*/}\n            {/*       className={error ? \"error\" : \"\"}*/}\n            {/*/>*/}\n\n            <TextField id=\"outlined-basic\" label={error} variant=\"outlined\" size={'small'}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n            />\n\n            {/*backgroundColor: 'gray', opacity: 0.3,*/}\n            <IconButton style={{ maxWidth: '15px', maxHeight: '15px', minWidth: '15px', minHeight: '15px' }} onClick={addTask}>\n                <AddIcon/>\n            </IconButton>\n\n\n\n                {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n);\n};\n\n"]},"metadata":{},"sourceType":"module"}