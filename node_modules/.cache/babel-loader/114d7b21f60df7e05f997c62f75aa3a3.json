{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  // let [tasks, setTasks] = useState([\n  //     {id: v1(), title: \"HTML&CSS\", isDone: true},\n  //     {id: v1(), title: \"JS\", isDone: true},\n  //     {id: v1(), title: \"ReactJS\", isDone: false},\n  //     {id: v1(), title: \"Rest API\", isDone: false},\n  //     {id: v1(), title: \"GraphQL\", isDone: false},\n  // ]);\n  // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n  let todolistID1 = v1();\n  let todolistID2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistID1,\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: todolistID2,\n    title: 'What to buy',\n    filter: 'all'\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistID1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todolistID2]: [{\n      id: v1(),\n      title: \"HTML&CSS2\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS2\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS2\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API2\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL2\",\n      isDone: false\n    }]\n  });\n\n  function removeTask(todolistID, id) {// let filteredTasks = tasks.filter(t => t.id != id);\n    // setTasks(filteredTasks);\n  }\n\n  function addTask(todolistID, title) {// let task = {id: v1(), title: title, isDone: false};\n    // let newTasks = [task, ...tasks];\n    // setTasks(newTasks);\n  }\n\n  function changeStatus(todolistID, taskId, isDone) {// let task = tasks.find(t => t.id === taskId);\n    // if (task) {\n    //     task.isDone = isDone;\n    // }\n    //\n    // setTasks([...tasks]);\n  } // let tasksForTodolist = tasks;\n  // if (filter === \"active\") {\n  //     tasksForTodolist = tasks.filter(t => t.isDone === false);\n  // }\n  // if (filter === \"completed\") {\n  //     tasksForTodolist = tasks.filter(t => t.isDone === true);\n  // }\n\n\n  function changeFilter(todolistID, value) {\n    // setFilter(value);\n    setTodolists(todolists.map(filtered => filtered.id === todolistID ? { ...filtered,\n      filter: value\n    } : filtered));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, todolists.map(mapTodolists => {\n    let tasksForTodolist = tasks[mapTodolists.id];\n\n    if (mapTodolists.filter === \"active\") {\n      tasksForTodolist = tasks[mapTodolists.id].filter(t => t.isDone === false);\n    }\n\n    if (mapTodolists.filter === \"completed\") {\n      tasksForTodolist = tasks[mapTodolists.id].filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: mapTodolists.id,\n      todolistID: mapTodolists.id,\n      title: mapTodolists.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: mapTodolists.filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useState","Todolist","v1","App","todolistID1","todolistID2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","todolistID","addTask","changeStatus","taskId","changeFilter","value","map","filtered","mapTodolists","tasksForTodolist","t"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type todolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    // let [tasks, setTasks] = useState([\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     {id: v1(), title: \"Rest API\", isDone: false},\r\n    //     {id: v1(), title: \"GraphQL\", isDone: false},\r\n    // ]);\r\n    // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n        // let filteredTasks = tasks.filter(t => t.id != id);\r\n        // setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n        // let task = {id: v1(), title: title, isDone: false};\r\n        // let newTasks = [task, ...tasks];\r\n        // setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\r\n        // let task = tasks.find(t => t.id === taskId);\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        // }\r\n        //\r\n        // setTasks([...tasks]);\r\n    }\r\n\r\n\r\n    // let tasksForTodolist = tasks;\r\n\r\n    // if (filter === \"active\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n    // }\r\n    // if (filter === \"completed\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n    // }\r\n\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        // setFilter(value);\r\n        setTodolists(todolists.map(filtered => filtered.id === todolistID ? {...filtered, filter:value} :filtered))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((mapTodolists) => {\r\n\r\n                let tasksForTodolist = tasks[mapTodolists.id];\r\n                if (mapTodolists.filter === \"active\") {\r\n                    tasksForTodolist = tasks[mapTodolists.id].filter(t => t.isDone === false);\r\n                }\r\n                if (mapTodolists.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[mapTodolists.id].filter(t => t.isDone === true);\r\n                }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={mapTodolists.id}\r\n                        todolistID={mapTodolists.id}\r\n                        title={mapTodolists.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={mapTodolists.filter}\r\n                    />\r\n                )\r\n            })}\r\n\r\n            {/*<Todolist title=\"What to learn\"*/}\r\n            {/*          tasks={tasksForTodolist}*/}\r\n            {/*          removeTask={removeTask}*/}\r\n            {/*          changeFilter={changeFilter}*/}\r\n            {/*          addTask={addTask}*/}\r\n            {/*          changeTaskStatus={changeStatus}*/}\r\n            {/*          filter={filter}*/}\r\n            {/*/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}