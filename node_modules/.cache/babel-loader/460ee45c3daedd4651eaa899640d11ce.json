{"ast":null,"code":"import React from'react';import{AddItemForm}from\"./components/AddItemForm\";import{EditTableSpan}from\"./components/EditTableSpan\";import{Button,ButtonGroup,IconButton}from\"@material-ui/core\";import DeleteForeverIcon from'@material-ui/icons/DeleteForever';import DeleteIcon from'@material-ui/icons/Delete';export function Todolist(props){// let [title, setTitle] = useState(\"\")\n// let [error, setError] = useState<string | null>(null)\n//\n// const addTask = () => {\n//     let newTitle = title.trim();\n//     if (newTitle !== \"\") {\n//         props.addTask(newTitle, props.id);\n//         setTitle(\"\");\n//     } else {\n//         setError(\"Title is required\");\n//     }\n// }\n//\n// const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n//     setTitle(e.currentTarget.value)\n// }\n//\n// const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n//     setError(null);\n//     if (e.charCode === 13) {\n//         addTask();\n//     }\n// }\nvar removeTodolist=function removeTodolist(){return props.removeTodolist(props.id);};var onAllClickHandler=function onAllClickHandler(){return props.changeFilter(\"all\",props.id);};var onActiveClickHandler=function onActiveClickHandler(){return props.changeFilter(\"active\",props.id);};var onCompletedClickHandler=function onCompletedClickHandler(){return props.changeFilter(\"completed\",props.id);};var addTaskHandler=function addTaskHandler(title){props.addTask(title,props.id);};var updateTaskHandler=function updateTaskHandler(title,tId){props.updateTask(tId,props.id,title);};var updateTodolistHandler=function updateTodolistHandler(title,tId){props.updateTodolistTitle(title,tId);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(EditTableSpan,{oldTitle:props.title,callBack:function callBack(title){return updateTodolistHandler(props.id,title);}}),/*#__PURE__*/React.createElement(IconButton,{onClick:removeTodolist},/*#__PURE__*/React.createElement(DeleteForeverIcon,null))),/*#__PURE__*/React.createElement(AddItemForm,{callBack:addTaskHandler}),/*#__PURE__*/React.createElement(\"ul\",null,props.tasks.map(function(t){var onClickHandler=function onClickHandler(){return props.removeTask(t.id,props.id);};var onChangeHandler=function onChangeHandler(e){var newIsDoneValue=e.currentTarget.checked;props.changeTaskStatus(t.id,newIsDoneValue,props.id);};return/*#__PURE__*/React.createElement(\"li\",{key:t.id,className:t.isDone?\"is-done\":\"\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",onChange:onChangeHandler,checked:t.isDone}),/*#__PURE__*/React.createElement(EditTableSpan,{oldTitle:t.title,callBack:function callBack(title){return updateTaskHandler(title,props.id);}}),/*#__PURE__*/React.createElement(IconButton,{size:'small',onClick:onClickHandler},/*#__PURE__*/React.createElement(DeleteIcon,{fontSize:'small'})));})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ButtonGroup,{size:'small',variant:'contained',disableElevation:true},/*#__PURE__*/React.createElement(Button,{style:{maxWidth:'60px',maxHeight:'40px',minWidth:'60px',minHeight:'40px'},color:props.filter==='all'?'secondary':'primary',className:props.filter==='all'?\"active-filter\":\"\",onClick:onAllClickHandler},\"All\"),/*#__PURE__*/React.createElement(Button,{color:props.filter==='active'?'secondary':'primary',className:props.filter==='active'?\"active-filter\":\"\",onClick:onActiveClickHandler},\"Active\"),/*#__PURE__*/React.createElement(Button,{color:props.filter==='completed'?'secondary':'primary',className:props.filter==='completed'?\"active-filter\":\"\",onClick:onCompletedClickHandler},\"Completed\"))));}","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/Todolist.tsx"],"names":["React","AddItemForm","EditTableSpan","Button","ButtonGroup","IconButton","DeleteForeverIcon","DeleteIcon","Todolist","props","removeTodolist","id","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","title","addTask","updateTaskHandler","tId","updateTask","updateTodolistHandler","updateTodolistTitle","tasks","map","t","onClickHandler","removeTask","onChangeHandler","e","newIsDoneValue","currentTarget","checked","changeTaskStatus","isDone","maxWidth","maxHeight","minWidth","minHeight","filter"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditTableSpan} from \"./components/EditTableSpan\";\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    updateTask: (tId: string, Id: string, title: string) => void\r\n    updateTodolistTitle: (tId: string, title: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    // let [title, setTitle] = useState(\"\")\r\n    // let [error, setError] = useState<string | null>(null)\r\n    //\r\n    // const addTask = () => {\r\n    //     let newTitle = title.trim();\r\n    //     if (newTitle !== \"\") {\r\n    //         props.addTask(newTitle, props.id);\r\n    //         setTitle(\"\");\r\n    //     } else {\r\n    //         setError(\"Title is required\");\r\n    //     }\r\n    // }\r\n    //\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    //\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         addTask();\r\n    //     }\r\n    // }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const updateTaskHandler = (title: string, tId: string) => {\r\n        props.updateTask(tId, props.id, title)\r\n    }\r\n\r\n    const updateTodolistHandler = (title: string, tId: string) => {\r\n        props.updateTodolistTitle(title, tId)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditTableSpan oldTitle={props.title} callBack={(title: string) => updateTodolistHandler(props.id, title)}/>\r\n            {/*{props.title}*/}\r\n            <IconButton onClick={removeTodolist}><DeleteForeverIcon/></IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        {/*<span>{t.title}</span>*/}\r\n                        <EditTableSpan oldTitle={t.title}\r\n                                       callBack={(title: string) => updateTaskHandler(title, props.id)}/>\r\n                        <IconButton size={'small'} onClick={onClickHandler}>\r\n                            <DeleteIcon fontSize={'small'}/>\r\n                        </IconButton>\r\n\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <ButtonGroup\r\n                size={'small'}\r\n                variant={'contained'}\r\n                disableElevation>\r\n                <Button\r\n                    style={{maxWidth: '60px', maxHeight: '40px', minWidth: '60px', minHeight: '40px'}}\r\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                    className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n\r\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n\r\n                    className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n\r\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n\r\n                    className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}