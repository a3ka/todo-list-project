{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from \"./components/AddItemForm\";\n\nfunction App() {\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n\n  function removeTask(id, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n\n    tasks[todolistId] = todolistTasks.filter(t => t.id !== id); // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    }; //достанем нужный массив по todolistId:\n\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n\n    tasks[todolistId] = [task, ...todolistTasks]; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  const updateTask = (tId, id, newTitle) => {\n    setTasks({ ...tasks,\n      [tId]: tasks[tId].map(el => el.id === tId ? { ...el,\n        title: newTitle\n      } : el)\n    });\n  };\n\n  function changeStatus(id, isDone, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.isDone = isDone; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function changeFilter(value, todolistId) {\n    let todolist = todolists.find(tl => tl.id === todolistId);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodolists([...todolists]);\n    }\n  }\n\n  function removeTodolist(id) {\n    // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\n    setTodolists(todolists.filter(tl => tl.id !== id)); // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n\n    delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  const addTodolist = newTitle => {\n    let newId = v1();\n    let newTodolist = {\n      id: newId,\n      title: newTitle,\n      filter: \"all\"\n    };\n    setTodolists([newTodolist, ...todolists]);\n    setTasks({ ...tasks,\n      [newId]: []\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddItemForm, {\n    callBack: addTodolist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), todolists.map(tl => {\n    let allTodolistTasks = tasks[tl.id];\n    let tasksForTodolist = allTodolistTasks;\n\n    if (tl.filter === \"active\") {\n      tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n    }\n\n    if (tl.filter === \"completed\") {\n      tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: tl.id,\n      id: tl.id,\n      title: tl.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      updateTask: updateTask,\n      changeTaskStatus: changeStatus,\n      filter: tl.filter,\n      removeTodolist: removeTodolist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 28\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useState","Todolist","v1","AddItemForm","App","todolistId1","todolistId2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","todolistId","todolistTasks","t","addTask","task","updateTask","tId","newTitle","map","el","changeStatus","find","changeFilter","value","todolist","tl","removeTodolist","addTodolist","newId","newTodolist","allTodolistTasks","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const updateTask = (tId: string, id: string, newTitle:string) => {\r\n        setTasks({...tasks, [tId]:tasks[tId].map(el => el.id === tId ? {...el, title: newTitle} : el)})\r\n        \r\n\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        let newId = v1()\r\n        let newTodolist:TodolistType = {id: newId, title: newTitle, filter: \"all\"}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newId]: []})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AddItemForm callBack={addTodolist} />\r\n\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        updateTask={updateTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}