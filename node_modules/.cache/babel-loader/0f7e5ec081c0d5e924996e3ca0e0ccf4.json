{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\n//* CRUD\n//* C -create\n//* R - read\n//* U - update\n//* D - delete\nfunction App() {\n  // BLL\n  //many todolists:\n  const todolistId_1 = v1();\n  const todolistId_2 = v1();\n  const [todolists, setTodolists] = useState([{\n    id: todolistId_1,\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: todolistId_2,\n    title: 'What to buy',\n    filter: 'all'\n  }]);\n  const [tasks, setTasks] = useState({\n    [todolistId_1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todolistId_2]: [{\n      id: v1(),\n      title: \"Sugar\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"Salat\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"Oil\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"BTC\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"ETH\",\n      isDone: false\n    }]\n  }); // FUNCTIONS\n\n  function removeTask(id, todolistId) {\n    ////\n    let filteredTasks = tasks.filter(t => t.id !== id);\n    setTasks(filteredTasks);\n  }\n\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n\n  const changeStatusCheckbox = (currentID, eventStatus) => {\n    setTasks(tasks.map(el => el.id === currentID ? { ...el,\n      isDone: eventStatus\n    } : el));\n  };\n\n  const [filter, setFilter] = useState(\"all\");\n  let tasksForTodolist = tasks;\n\n  if (filter === \"active\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === false);\n  }\n\n  if (filter === \"completed\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === true);\n  }\n\n  function changeFilter(value) {\n    setFilter(value);\n  } // UIL\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Todolist, {\n    title: todolistTitle,\n    tasks: tasksForTodolist,\n    removeTask: removeTask,\n    changeFilter: changeFilter,\n    addTask: addTask,\n    changeStatusCheckbox: changeStatusCheckbox,\n    filter: filter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useState","Todolist","v1","App","todolistId_1","todolistId_2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","todolistId","filteredTasks","t","addTask","task","newTasks","changeStatusCheckbox","currentID","eventStatus","map","el","setFilter","tasksForTodolist","changeFilter","value","todolistTitle"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [todolistId:string]: Array<TaskType>\r\n}\r\n\r\n//* CRUD\r\n//* C -create\r\n//* R - read\r\n//* U - update\r\n//* D - delete\r\n\r\nfunction App() {\r\n\r\n    // BLL\r\n    //many todolists:\r\n    const todolistId_1 = v1();\r\n    const todolistId_2 = v1();\r\n\r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId_1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistId_2]: [\r\n            {id: v1(), title: \"Sugar\", isDone: true},\r\n            {id: v1(), title: \"Salat\", isDone: true},\r\n            {id: v1(), title: \"Oil\", isDone: false},\r\n            {id: v1(), title: \"BTC\", isDone: false},\r\n            {id: v1(), title: \"ETH\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        \r\n        ////\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    const changeStatusCheckbox = (currentID: string, eventStatus: boolean) => {\r\n        setTasks(tasks.map((el) => el.id === currentID ? {...el, isDone: eventStatus} : el))\r\n\r\n    }\r\n\r\n    const [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n// UIL\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title={todolistTitle}\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask}\r\n                      changeStatusCheckbox={changeStatusCheckbox}\r\n                      filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}