{"ast":null,"code":"import _defineProperty from\"/home/aka/Documents/todo-list-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/home/aka/Documents/todo-list-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'./App.css';import{v1}from'uuid';import{Container}from\"@material-ui/core\";var App=function App(){var _useState5;var todolistId1=v1();var todolistId2=v1();var _useState=useState([{id:todolistId1,title:\"What to learn\",filter:\"all\"},{id:todolistId2,title:\"What to buy\",filter:\"all\"}]),_useState2=_slicedToArray(_useState,2),todolists=_useState2[0],setTodolists=_useState2[1];var _useState3=useState((_useState5={},_defineProperty(_useState5,todolistId1,[{id:v1(),title:\"HTML&CSS\",isDone:true},{id:v1(),title:\"JS\",isDone:true}]),_defineProperty(_useState5,todolistId2,[{id:v1(),title:\"Milk\",isDone:true},{id:v1(),title:\"React Book\",isDone:true}]),_useState5)),_useState4=_slicedToArray(_useState3,2),tasks=_useState4[0],setTasks=_useState4[1];return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Container,null,\"Hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello\"));};// function App() {\n//     let todolistId1 = v1();\n//     let todolistId2 = v1();\n//\n//     let [todolists, setTodolists] = useState<Array<TodolistType>>([\n//         {id: todolistId1, title: \"What to learn\", filter: \"all\"},\n//         {id: todolistId2, title: \"What to buy\", filter: \"all\"}\n//     ])\n//\n//     let [tasks, setTasks] = useState<TasksStateType>({\n//         [todolistId1]: [\n//             {id: v1(), title: \"HTML&CSS\", isDone: true},\n//             {id: v1(), title: \"JS\", isDone: true}\n//         ],\n//         [todolistId2]: [\n//             {id: v1(), title: \"Milk\", isDone: true},\n//             {id: v1(), title: \"React Book\", isDone: true}\n//         ]\n//     });\n//\n//     function removeTask(id: string, todolistId: string) {\n//         //достанем нужный массив по todolistId:\n//         let todolistTasks = tasks[todolistId];\n//         // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n//         tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n//         setTasks({...tasks});\n//     }\n//\n//     function addTask(title: string, todolistId: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         //достанем нужный массив по todolistId:\n//         let todolistTasks = tasks[todolistId];\n//         // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n//         tasks[todolistId] = [task, ...todolistTasks];\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n//         setTasks({...tasks});\n//     }\n//\n//     const updateTask = (tId: string, id: string, newTitle: string) => {\n//         setTasks({...tasks, [tId]: tasks[tId].map(el => el.id === id ? {...el, title: newTitle} : el)})\n//     }\n//\n//     function changeStatus(id: string, isDone: boolean, todolistId: string) {\n//         //достанем нужный массив по todolistId:\n//         let todolistTasks = tasks[todolistId];\n//         // найдём нужную таску:\n//         let task = todolistTasks.find(t => t.id === id);\n//         //изменим таску, если она нашлась\n//         if (task) {\n//             task.isDone = isDone;\n//             // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n//             setTasks({...tasks});\n//         }\n//     }\n//\n//     function changeFilter(value: FilterValuesType, todolistId: string) {\n//         let todolist = todolists.find(tl => tl.id === todolistId);\n//         if (todolist) {\n//             todolist.filter = value;\n//             setTodolists([...todolists])\n//         }\n//     }\n//\n//     function removeTodolist(id: string) {\n//         // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\n//         setTodolists(todolists.filter(tl => tl.id !== id));\n//         // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n//         delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n//         setTasks({...tasks});\n//     }\n//\n//     const addTodolist = (newTitle: string) => {\n//         let newId = v1()\n//         let newTodolist: TodolistType = {id: newId, title: newTitle, filter: \"all\"}\n//         setTodolists([newTodolist, ...todolists])\n//         setTasks({...tasks, [newId]: []})\n//     }\n//\n//     const updateTodolistTitle = (newTitle: string, tId: string) => {\n//         // id: todolistId2, title: \"What to buy\", filter: \"all\"\n//         console.log(newTitle)\n//     }\n//\n//     return (\n//         // <div className=\"App\">\n//         <div>\n//             <ButtonAppBar/>\n//             <Container fixed>\n//                 <Grid container style={{padding: '20px'}}>\n//                     <AddItemForm callBack={addTodolist}/>\n//                 </Grid>\n//                 <Grid container spacing={3}>\n//                     {\n//                         todolists.map(tl => {\n//                             let allTodolistTasks = tasks[tl.id];\n//                             let tasksForTodolist = allTodolistTasks;\n//\n//                             if (tl.filter === \"active\") {\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n//                             }\n//                             if (tl.filter === \"completed\") {\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n//                             }\n//\n//                             return <Grid item key={tl.id}>\n//                                 <Paper style={{padding: \"20px\"}} elevation={3}>\n//                                     <Todolist\n//                                         id={tl.id}\n//                                         title={tl.title}\n//                                         tasks={tasksForTodolist}\n//                                         removeTask={removeTask}\n//                                         changeFilter={changeFilter}\n//                                         addTask={addTask}\n//                                         updateTask={updateTask}\n//                                         updateTodolistTitle={updateTodolistTitle}\n//                                         changeTaskStatus={changeStatus}\n//                                         filter={tl.filter}\n//                                         removeTodolist={removeTodolist}\n//                                     />\n//                                 </Paper>\n//                             </Grid>;\n//                         })\n//                         }\n//                         </Grid>\n//                         </Container>\n//                         </div>\n//                         )\n//                         ;\n//                     }\nexport default App;","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/App.tsx"],"names":["React","useState","v1","Container","App","todolistId1","todolistId2","id","title","filter","todolists","setTodolists","isDone","tasks","setTasks"],"mappings":"0TAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAO,WAAP,CAEA,OAAQC,EAAR,KAAiB,MAAjB,CACA,OAAQC,SAAR,KAAwB,mBAAxB,CAcA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,gBAEd,GAAIC,CAAAA,WAAW,CAAGH,EAAE,EAApB,CACA,GAAII,CAAAA,WAAW,CAAGJ,EAAE,EAApB,CAHc,cAKkBD,QAAQ,CAAsB,CAC1D,CAACM,EAAE,CAAEF,WAAL,CAAkBG,KAAK,CAAE,eAAzB,CAA0CC,MAAM,CAAE,KAAlD,CAD0D,CAE1D,CAACF,EAAE,CAAED,WAAL,CAAkBE,KAAK,CAAE,aAAzB,CAAwCC,MAAM,CAAE,KAAhD,CAF0D,CAAtB,CAL1B,wCAKTC,SALS,eAKEC,YALF,8BAUUV,QAAQ,2CAC3BI,WAD2B,CACb,CACX,CAACE,EAAE,CAAEL,EAAE,EAAP,CAAWM,KAAK,CAAE,UAAlB,CAA8BI,MAAM,CAAE,IAAtC,CADW,CAEX,CAACL,EAAE,CAAEL,EAAE,EAAP,CAAWM,KAAK,CAAE,IAAlB,CAAwBI,MAAM,CAAE,IAAhC,CAFW,CADa,6BAK3BN,WAL2B,CAKb,CACX,CAACC,EAAE,CAAEL,EAAE,EAAP,CAAWM,KAAK,CAAE,MAAlB,CAA0BI,MAAM,CAAE,IAAlC,CADW,CAEX,CAACL,EAAE,CAAEL,EAAE,EAAP,CAAWM,KAAK,CAAE,YAAlB,CAAgCI,MAAM,CAAE,IAAxC,CAFW,CALa,cAVlB,yCAUTC,KAVS,eAUFC,QAVE,eAqBd,mBAAO,4CACH,oBAAC,SAAD,moB,cAAeV,CAAAA,GAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {Container} from \"@material-ui/core\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    return <div>\r\n        <Container>\r\n            Hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello\r\n        </Container>\r\n    </div>\r\n}\r\n\r\n\r\n// function App() {\r\n//     let todolistId1 = v1();\r\n//     let todolistId2 = v1();\r\n//\r\n//     let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n//         {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n//         {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n//     ])\r\n//\r\n//     let [tasks, setTasks] = useState<TasksStateType>({\r\n//         [todolistId1]: [\r\n//             {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//             {id: v1(), title: \"JS\", isDone: true}\r\n//         ],\r\n//         [todolistId2]: [\r\n//             {id: v1(), title: \"Milk\", isDone: true},\r\n//             {id: v1(), title: \"React Book\", isDone: true}\r\n//         ]\r\n//     });\r\n//\r\n//     function removeTask(id: string, todolistId: string) {\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n//         tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     function addTask(title: string, todolistId: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n//         tasks[todolistId] = [task, ...todolistTasks];\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     const updateTask = (tId: string, id: string, newTitle: string) => {\r\n//         setTasks({...tasks, [tId]: tasks[tId].map(el => el.id === id ? {...el, title: newTitle} : el)})\r\n//     }\r\n//\r\n//     function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // найдём нужную таску:\r\n//         let task = todolistTasks.find(t => t.id === id);\r\n//         //изменим таску, если она нашлась\r\n//         if (task) {\r\n//             task.isDone = isDone;\r\n//             // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//             setTasks({...tasks});\r\n//         }\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType, todolistId: string) {\r\n//         let todolist = todolists.find(tl => tl.id === todolistId);\r\n//         if (todolist) {\r\n//             todolist.filter = value;\r\n//             setTodolists([...todolists])\r\n//         }\r\n//     }\r\n//\r\n//     function removeTodolist(id: string) {\r\n//         // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n//         setTodolists(todolists.filter(tl => tl.id !== id));\r\n//         // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n//         delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     const addTodolist = (newTitle: string) => {\r\n//         let newId = v1()\r\n//         let newTodolist: TodolistType = {id: newId, title: newTitle, filter: \"all\"}\r\n//         setTodolists([newTodolist, ...todolists])\r\n//         setTasks({...tasks, [newId]: []})\r\n//     }\r\n//\r\n//     const updateTodolistTitle = (newTitle: string, tId: string) => {\r\n//         // id: todolistId2, title: \"What to buy\", filter: \"all\"\r\n//         console.log(newTitle)\r\n//     }\r\n//\r\n//     return (\r\n//         // <div className=\"App\">\r\n//         <div>\r\n//             <ButtonAppBar/>\r\n//             <Container fixed>\r\n//                 <Grid container style={{padding: '20px'}}>\r\n//                     <AddItemForm callBack={addTodolist}/>\r\n//                 </Grid>\r\n//                 <Grid container spacing={3}>\r\n//                     {\r\n//                         todolists.map(tl => {\r\n//                             let allTodolistTasks = tasks[tl.id];\r\n//                             let tasksForTodolist = allTodolistTasks;\r\n//\r\n//                             if (tl.filter === \"active\") {\r\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n//                             }\r\n//                             if (tl.filter === \"completed\") {\r\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n//                             }\r\n//\r\n//                             return <Grid item key={tl.id}>\r\n//                                 <Paper style={{padding: \"20px\"}} elevation={3}>\r\n//                                     <Todolist\r\n//                                         id={tl.id}\r\n//                                         title={tl.title}\r\n//                                         tasks={tasksForTodolist}\r\n//                                         removeTask={removeTask}\r\n//                                         changeFilter={changeFilter}\r\n//                                         addTask={addTask}\r\n//                                         updateTask={updateTask}\r\n//                                         updateTodolistTitle={updateTodolistTitle}\r\n//                                         changeTaskStatus={changeStatus}\r\n//                                         filter={tl.filter}\r\n//                                         removeTodolist={removeTodolist}\r\n//                                     />\r\n//                                 </Paper>\r\n//                             </Grid>;\r\n//                         })\r\n//                         }\r\n//                         </Grid>\r\n//                         </Container>\r\n//                         </div>\r\n//                         )\r\n//                         ;\r\n//                     }\r\n\r\n                    export default App;\r\n"]},"metadata":{},"sourceType":"module"}