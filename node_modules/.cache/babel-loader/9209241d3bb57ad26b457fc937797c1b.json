{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/todo-list-project/src/Todolist.tsx\";\nimport React from 'react';\nimport { AddItemForm } from \"./components/AddItemForm\";\nimport { EditTableSpan } from \"./components/EditTableSpan\";\nimport { Button, ButtonGroup, IconButton } from \"@material-ui/core\";\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nexport function Todolist(props) {\n  // let [title, setTitle] = useState(\"\")\n  // let [error, setError] = useState<string | null>(null)\n  //\n  // const addTask = () => {\n  //     let newTitle = title.trim();\n  //     if (newTitle !== \"\") {\n  //         props.addTask(newTitle, props.id);\n  //         setTitle(\"\");\n  //     } else {\n  //         setError(\"Title is required\");\n  //     }\n  // }\n  //\n  // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n  //     setTitle(e.currentTarget.value)\n  // }\n  //\n  // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n  //     setError(null);\n  //     if (e.charCode === 13) {\n  //         addTask();\n  //     }\n  // }\n  const removeTodolist = () => props.removeTodolist(props.id);\n\n  const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\n\n  const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\n\n  const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\n\n  const addTaskHandler = title => {\n    props.addTask(title, props.id);\n  };\n\n  const updateTaskHandler = (title, tId) => {\n    props.updateTask(tId, props.id, title);\n  };\n\n  const updateTodolistHandler = (title, tId) => {\n    props.updateTodolistTitle(title, tId);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EditTableSpan, {\n    oldTitle: props.title,\n    callBack: title => updateTodolistHandler(props.id, title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: removeTodolist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DeleteForeverIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 50\n    }\n  }))), /*#__PURE__*/React.createElement(AddItemForm, {\n    callBack: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, props.tasks.map(t => {\n    const onClickHandler = () => props.removeTask(t.id, props.id);\n\n    const onChangeHandler = e => {\n      let newIsDoneValue = e.currentTarget.checked;\n      props.changeTaskStatus(t.id, newIsDoneValue, props.id);\n    };\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: t.id,\n      className: t.isDone ? \"is-done\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: onChangeHandler,\n      checked: t.isDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(EditTableSpan, {\n      oldTitle: t.title,\n      callBack: title => updateTaskHandler(title, props.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DeleteForeverIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    })));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    size: 'small',\n    variant: 'contained',\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: props.filter === 'all' ? 'secondary' : 'primary',\n    className: props.filter === 'all' ? \"active-filter\" : \"\",\n    onClick: onAllClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(Button, {\n    color: props.filter === 'active' ? 'secondary' : 'primary',\n    className: props.filter === 'active' ? \"active-filter\" : \"\",\n    onClick: onActiveClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(Button, {\n    color: props.filter === 'completed' ? 'secondary' : 'primary',\n    className: props.filter === 'completed' ? \"active-filter\" : \"\",\n    onClick: onCompletedClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Completed\"))));\n}","map":{"version":3,"sources":["/home/aka/Documents/todo-list-project/src/Todolist.tsx"],"names":["React","AddItemForm","EditTableSpan","Button","ButtonGroup","IconButton","DeleteForeverIcon","Todolist","props","removeTodolist","id","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","title","addTask","updateTaskHandler","tId","updateTask","updateTodolistHandler","updateTodolistTitle","tasks","map","t","onClickHandler","removeTask","onChangeHandler","e","newIsDoneValue","currentTarget","checked","changeTaskStatus","isDone","filter"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditTableSpan} from \"./components/EditTableSpan\";\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    updateTask: (tId: string, Id: string, title: string) => void\r\n    updateTodolistTitle: (tId: string, title: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    // let [title, setTitle] = useState(\"\")\r\n    // let [error, setError] = useState<string | null>(null)\r\n    //\r\n    // const addTask = () => {\r\n    //     let newTitle = title.trim();\r\n    //     if (newTitle !== \"\") {\r\n    //         props.addTask(newTitle, props.id);\r\n    //         setTitle(\"\");\r\n    //     } else {\r\n    //         setError(\"Title is required\");\r\n    //     }\r\n    // }\r\n    //\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    //\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         addTask();\r\n    //     }\r\n    // }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const updateTaskHandler = (title: string, tId: string) => {\r\n        props.updateTask(tId, props.id, title)\r\n    }\r\n\r\n    const updateTodolistHandler = (title: string, tId: string) => {\r\n        props.updateTodolistTitle(title, tId)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditTableSpan oldTitle={props.title} callBack={(title: string) => updateTodolistHandler(props.id, title)}/>\r\n            {/*{props.title}*/}\r\n            <IconButton onClick={removeTodolist}><DeleteForeverIcon/></IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        {/*<span>{t.title}</span>*/}\r\n                        <EditTableSpan oldTitle={t.title}\r\n                                       callBack={(title: string) => updateTaskHandler(title, props.id)}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <DeleteForeverIcon/>\r\n                        </IconButton>\r\n\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <ButtonGroup\r\n                size={'small'}\r\n                variant={'contained'}\r\n                disableElevation>\r\n                <Button\r\n                    \r\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                    className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n\r\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n\r\n                    className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n\r\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n\r\n                    className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}