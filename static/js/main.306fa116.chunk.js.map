{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","todolistId1","v1","todolistId2","useState","id","title","filter","isDone","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAmLmCA,EAjKvB,WAAO,IAAD,EAEVC,EAAcC,cACdC,EAAcD,cAHJ,EAKkBE,mBAA8B,CAC1D,CAACC,GAAIJ,EAAaK,MAAO,gBAAiBC,OAAQ,OAClD,CAACF,GAAIF,EAAaG,MAAO,cAAeC,OAAQ,SAPtC,gCAUUH,oBAAQ,mBAC3BH,EAAc,CACX,CAACI,GAAIH,cAAMI,MAAO,WAAYE,QAAQ,GACtC,CAACH,GAAIH,cAAMI,MAAO,KAAME,QAAQ,KAHR,cAK3BL,EAAc,CACX,CAACE,GAAIH,cAAMI,MAAO,OAAQE,QAAQ,GAClC,CAACH,GAAIH,cAAMI,MAAO,aAAcE,QAAQ,KAPhB,KAVlB,6BAqBd,OAAO,6BACH,kBAACC,EAAA,EAAD,qDC5BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.306fa116.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {Container} from \"@material-ui/core\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    return <div>\r\n        <Container>\r\n            Hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello\r\n        </Container>\r\n    </div>\r\n}\r\n\r\n\r\n// function App() {\r\n//     let todolistId1 = v1();\r\n//     let todolistId2 = v1();\r\n//\r\n//     let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n//         {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n//         {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n//     ])\r\n//\r\n//     let [tasks, setTasks] = useState<TasksStateType>({\r\n//         [todolistId1]: [\r\n//             {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//             {id: v1(), title: \"JS\", isDone: true}\r\n//         ],\r\n//         [todolistId2]: [\r\n//             {id: v1(), title: \"Milk\", isDone: true},\r\n//             {id: v1(), title: \"React Book\", isDone: true}\r\n//         ]\r\n//     });\r\n//\r\n//     function removeTask(id: string, todolistId: string) {\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n//         tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     function addTask(title: string, todolistId: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n//         tasks[todolistId] = [task, ...todolistTasks];\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     const updateTask = (tId: string, id: string, newTitle: string) => {\r\n//         setTasks({...tasks, [tId]: tasks[tId].map(el => el.id === id ? {...el, title: newTitle} : el)})\r\n//     }\r\n//\r\n//     function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n//         //достанем нужный массив по todolistId:\r\n//         let todolistTasks = tasks[todolistId];\r\n//         // найдём нужную таску:\r\n//         let task = todolistTasks.find(t => t.id === id);\r\n//         //изменим таску, если она нашлась\r\n//         if (task) {\r\n//             task.isDone = isDone;\r\n//             // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//             setTasks({...tasks});\r\n//         }\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType, todolistId: string) {\r\n//         let todolist = todolists.find(tl => tl.id === todolistId);\r\n//         if (todolist) {\r\n//             todolist.filter = value;\r\n//             setTodolists([...todolists])\r\n//         }\r\n//     }\r\n//\r\n//     function removeTodolist(id: string) {\r\n//         // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n//         setTodolists(todolists.filter(tl => tl.id !== id));\r\n//         // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n//         delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n//         // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n//         setTasks({...tasks});\r\n//     }\r\n//\r\n//     const addTodolist = (newTitle: string) => {\r\n//         let newId = v1()\r\n//         let newTodolist: TodolistType = {id: newId, title: newTitle, filter: \"all\"}\r\n//         setTodolists([newTodolist, ...todolists])\r\n//         setTasks({...tasks, [newId]: []})\r\n//     }\r\n//\r\n//     const updateTodolistTitle = (newTitle: string, tId: string) => {\r\n//         // id: todolistId2, title: \"What to buy\", filter: \"all\"\r\n//         console.log(newTitle)\r\n//     }\r\n//\r\n//     return (\r\n//         // <div className=\"App\">\r\n//         <div>\r\n//             <ButtonAppBar/>\r\n//             <Container fixed>\r\n//                 <Grid container style={{padding: '20px'}}>\r\n//                     <AddItemForm callBack={addTodolist}/>\r\n//                 </Grid>\r\n//                 <Grid container spacing={3}>\r\n//                     {\r\n//                         todolists.map(tl => {\r\n//                             let allTodolistTasks = tasks[tl.id];\r\n//                             let tasksForTodolist = allTodolistTasks;\r\n//\r\n//                             if (tl.filter === \"active\") {\r\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n//                             }\r\n//                             if (tl.filter === \"completed\") {\r\n//                                 tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n//                             }\r\n//\r\n//                             return <Grid item key={tl.id}>\r\n//                                 <Paper style={{padding: \"20px\"}} elevation={3}>\r\n//                                     <Todolist\r\n//                                         id={tl.id}\r\n//                                         title={tl.title}\r\n//                                         tasks={tasksForTodolist}\r\n//                                         removeTask={removeTask}\r\n//                                         changeFilter={changeFilter}\r\n//                                         addTask={addTask}\r\n//                                         updateTask={updateTask}\r\n//                                         updateTodolistTitle={updateTodolistTitle}\r\n//                                         changeTaskStatus={changeStatus}\r\n//                                         filter={tl.filter}\r\n//                                         removeTodolist={removeTodolist}\r\n//                                     />\r\n//                                 </Paper>\r\n//                             </Grid>;\r\n//                         })\r\n//                         }\r\n//                         </Grid>\r\n//                         </Container>\r\n//                         </div>\r\n//                         )\r\n//                         ;\r\n//                     }\r\n\r\n                    export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n//ReactDOM.render(<div>Hello</div>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}